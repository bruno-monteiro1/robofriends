{"version":3,"sources":["reducers.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","serviceWorker.js","index.js"],"names":["initialState","searchField","Card","props","name","email","id","username","react_default","a","createElement","className","alt","src","concat","CardList","_ref","robots","map","user","i","components_Card","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundary","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","App","_this2","fetch","then","response","json","users","_this$props","onSearchChange","filteredRobots","filter","robot","toLowerCase","includes","length","components_SearchBox","components_Scroll","components_ErrorBoundary","components_CardList","connect","dispatch","event","payload","target","value","Boolean","window","location","hostname","match","store","createStore","arguments","undefined","action","assign","ReactDOM","render","es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2a206191.chunk.js","sourcesContent":["import { CHANGE_SEARCH_FIELD } from './constants.js';\n\nconst initialState = {\n\tsearchField: ''\n}\n\nexport const searchRobots = (state=initialState, action={}) => {\n\tswitch(action.type) {\n\t\tcase CHANGE_SEARCH_FIELD:\n\t\t\treturn Object.assign({}, state, {searchField: action.payload})\n\t\tdefault:\n\t\t\treturn state;\n\n\t}\n}","import React from 'react';\n\nconst Card = (props) => {\n\tconst { name, email, id, username } = props;\n\treturn (\n\t\t<div className='tc bg-light-blue dib br3 pa3 ma2 grow bw2 shadow-5'>\n\t\t\t<img alt='robots' src={`https://robohash.org/${id}?200x200`} />\n\n\t\t\t<div>\n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<p>{username}</p>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\t)\n\n}\n\nexport default Card;","import React from 'react'\nimport Card from './Card'\n\nconst CardList = ({ robots }) => {\n\n\n\treturn (\n\t\t<div>\n\t\t\t{\n\t\t\t\t\trobots.map((user, i) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t<Card \n\t\t\t\t\tkey={i} \n\t\t\t\t\tid={robots[i].id} \n\t\t\t\t\tname={robots[i].name} \n\t\t\t\t\temail={robots[i].email}\n\t\t\t\t\tusername={robots[i].username} />\n\t\t\t\t)\n\t\t\t})\n\t\t\t}\n\t\t</div>\n\n\t\t);\n}\n\nexport default CardList;","import React from 'react'\nimport 'tachyons'\n\nconst SearchBox = ({ searchChange }) => {\n\treturn(\n\t<div className='pa2'>\n\t\t<input\n\t\t\tclassName='pa2 bg-lightest-blue'\n\t\t\ttype='search' \n\t\t\tplaceholder='Search Robots' \n\t\t\tonChange={searchChange}\n\t\t/>\n\t</div>\n\t)\n}\n\nexport default SearchBox;","import React from 'react'\n\nconst Scroll = (props) => {\n\treturn (\n\t\t<div style={{ overflowY: 'scroll', border: '1px solid black', height: '800px'}}>\n\t\t\t{props.children}\n\t\t</div>\n\t)\n}\n\nexport default Scroll;","import React, { Component } from 'react'\n\nclass ErrorBoundary extends Component {\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\thasError: false\n\t\t}\n\t}\n\n\tcomponentDidCatch(error, info){\n\t\tthis.setState({ hasError: true })\n\t}\n\n\trender(){\n\t\tif(this.state.hasError){\n\t\t\treturn <h1>Ooooops. Ocorreu algo inesperado!</h1>\n\t\t}\n\n\t\treturn this.props.children;\n\t}\n}\nexport default ErrorBoundary;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport './App.css';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\n\nimport { setSearchField } from '../actions';\n\n\nconst mapStateToProps = state => {\n\treturn {\n\t\tsearchField: state.searchField\n\t}\n}\n\nconst mapDispatchToProps = (dispatch) => {\n\treturn {\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value))\n\t}\n}\n\nclass App extends Component {\n\tconstructor(){\n\t\tsuper();\n\t\tthis.state = {\n\t\t\trobots: [],\n\t\t}\n\t}\n\n\tcomponentDidMount(){\n\t\tfetch('https://jsonplaceholder.typicode.com/users').then(response =>{\n\t\t\treturn response.json();\n\t\t})\n\t\t.then(users => {\n\t\t\tthis.setState({robots: users});\n\t\t});\n\t}\n\n\trender(){\n\t\tconst { robots } = this.state;\n\t\tconst { searchField, onSearchChange } = this.props;\n\n\t\tconst filteredRobots = robots.filter(robot => {\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\n\t\t});\n\n\t\treturn !robots.length ?\n\t\t<h1>Loading...</h1> :\n\t\t(\n\t\t\t<div className='tc'>\n\t\t\t\t<h1 className='f1'>RoboFriends</h1>\n\t\t\t\t<SearchBox searchChange={ onSearchChange }/>\n\t\t\t\t<Scroll>\n\t\t\t\t\t<ErrorBoundary>\n\t\t\t\t\t\t<CardList robots={ filteredRobots } />\n\t\t\t\t\t</ErrorBoundary>\n\t\t\t\t</Scroll>\n\t\t\n\t\t\t</div>\n\t\t);\n\t\n\t}\n\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n","import { CHANGE_SEARCH_FIELD } from './constants.js'\n\nexport const setSearchField = (text) => {\n\treturn {\n\t\ttype: CHANGE_SEARCH_FIELD,\n\t\tpayload: text\n\t}\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD'","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider, connect } from 'react-redux';\nimport { createStore } from 'redux';\nimport { searchRobots } from './reducers';\nimport './index.css';\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons'\n\nconst store = createStore(searchRobots);\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}